{"version":3,"file":"index.cjs.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isFunction.ts","../src/utils/objectHasFunction.ts","../src/useWatch.ts","../src/useController.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/generateId.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/utils/append.ts","../src/utils/cloneObject.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getDirtyFields.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/utils/isRegex.ts","../src/logic/getRuleValue.ts","../src/logic/schemaErrorLookup.ts","../src/logic/skipValidation.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/hasValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/logic/unsetEmptyArray.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (value) =>\n      _mounted.current &&\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    [control, exact],\n  );\n\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(\n    () => () => {\n      _mounted.current = false;\n    },\n    [],\n  );\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n    [control, exact, defaultValue],\n  );\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback,\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n\n  const _registerProps = React.useRef(\n    control.register(name, {\n      ...props.rules,\n      value,\n    }),\n  );\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      )\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(\n        (event) => {\n          _registerProps.current.onChange({\n            target: {\n              value: getEventValue(event),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.CHANGE,\n          });\n        },\n        [name],\n      ),\n      onBlur: React.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      }, [name, control]),\n      ref: React.useCallback(\n        (elm) => {\n          const field = get(control._fields, name);\n\n          if (elm && field && elm.focus) {\n            field._f.ref = {\n              focus: () => elm.focus(),\n              setCustomValidity: (message: string) =>\n                elm.setCustomValidity(message),\n              reportValidity: () => elm.reportValidity(),\n            };\n          }\n        },\n        [name, control],\n      ),\n    },\n    formState,\n    fieldState: control.getFieldState(name, formState),\n  };\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && Array.isArray(get(_fields, name))) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (\n      _proxyFormState.errors &&\n      shouldSetFields &&\n      Array.isArray(get(_formState.errors, name))\n    ) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (\n      _proxyFormState.touchedFields &&\n      Array.isArray(get(_formState.touchedFields, name))\n    ) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n    }\n\n    if (_proxyFormState.dirtyFields) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName): any[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: refs.concat(fieldRef).filter(live),\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const callback = React.useCallback(({ values, name: fieldArrayName }) => {\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n\n  useSubscribe({\n    callback,\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    updateValues(updatedFieldArrayValues);\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updatedFieldArrayValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    setFields(updatedFieldArrayValues);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updatedFieldArrayValues,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray(name),\n      index,\n      value,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    setFields([...updatedFieldArrayValues]);\n    updateValues(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updatedFieldArrayValues,\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(value);\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValues,\n      {},\n      [...updatedFieldArrayValues],\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n};\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","React","createContext","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","props","_props","useRef","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","useCallback","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","useWatch","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","isNameInFieldArray","array","_defaultValues","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","onChange","getEventValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","getFieldState","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","d","performance","now","c","r","Math","random","toString","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","append","cloneObject","Set","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","isConnected","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","markFieldsDirty","isParentNodeArray","defaultValues","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","RegExp","rule","isRegex","schemaErrorLookup","error","join","foundError","pop","isValidElement","getValidateError","isMessage","validationData","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","createFormControl","delayErrorCallback","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","getDirtyFields","isWatched","shouldSkipValidation","deps","isTouched","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","all","invalid","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","concat","live","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","unsetEmptyArray","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","resetField","clearErrors","inputName","setError","setFocus","render","Provider","children","keyName","setFields","ids","generateId","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","then","swap","swapArrayAt","move","moveArrayAt","prependValue","prependAt","getFocusFieldName","fillEmptyArray","appendValue","appendAt","remove","removeArrayAt","insertValue","insertAt","update","updateAt","useMemo","_formControl"],"mappings":"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"}